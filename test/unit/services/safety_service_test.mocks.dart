// Mocks generated by Mockito 5.4.6 from annotations
// in vibe_app/test/unit/services/safety_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:vibe_app/features/safety/services/safety_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [SafetyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSafetyService extends _i1.Mock implements _i2.SafetyService {
  MockSafetyService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<String>> getBlockedUsers() =>
      (super.noSuchMethod(
            Invocation.method(#getBlockedUsers, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<void> blockUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#blockUser, [userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> unblockUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#unblockUser, [userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> isUserBlocked(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#isUserBlocked, [userId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> reportUser({
    required String? userId,
    required String? reason,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#reportUser, [], {
              #userId: userId,
              #reason: reason,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> reportEvent({
    required String? eventId,
    required String? reason,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#reportEvent, [], {
              #eventId: eventId,
              #reason: reason,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
