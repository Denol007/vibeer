// Mocks generated by Mockito 5.4.6 from annotations
// in vibe_app/test/unit/services/events_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vibe_app/features/events/models/event_category.dart' as _i6;
import 'package:vibe_app/features/events/models/event_model.dart' as _i2;
import 'package:vibe_app/features/events/services/events_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeEventModel_0 extends _i1.SmartFake implements _i2.EventModel {
  _FakeEventModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [EventsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventsService extends _i1.Mock implements _i3.EventsService {
  MockEventsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i2.EventModel>> getActiveEventsInBounds({
    required _i5.GeoPoint? center,
    required double? radiusKm,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getActiveEventsInBounds, [], {
              #center: center,
              #radiusKm: radiusKm,
            }),
            returnValue: _i4.Stream<List<_i2.EventModel>>.empty(),
          )
          as _i4.Stream<List<_i2.EventModel>>);

  @override
  _i4.Future<_i2.EventModel?> getEvent(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#getEvent, [eventId]),
            returnValue: _i4.Future<_i2.EventModel?>.value(),
          )
          as _i4.Future<_i2.EventModel?>);

  @override
  _i4.Stream<List<_i2.EventModel>> getMyOrganizedEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getMyOrganizedEvents, []),
            returnValue: _i4.Stream<List<_i2.EventModel>>.empty(),
          )
          as _i4.Stream<List<_i2.EventModel>>);

  @override
  _i4.Stream<List<_i2.EventModel>> getMyParticipatingEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getMyParticipatingEvents, []),
            returnValue: _i4.Stream<List<_i2.EventModel>>.empty(),
          )
          as _i4.Stream<List<_i2.EventModel>>);

  @override
  _i4.Future<_i2.EventModel> createEvent({
    required String? title,
    required String? description,
    required _i6.EventCategory? category,
    required _i5.GeoPoint? location,
    String? locationName,
    required DateTime? startTime,
    required int? neededParticipants,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createEvent, [], {
              #title: title,
              #description: description,
              #category: category,
              #location: location,
              #locationName: locationName,
              #startTime: startTime,
              #neededParticipants: neededParticipants,
            }),
            returnValue: _i4.Future<_i2.EventModel>.value(
              _FakeEventModel_0(
                this,
                Invocation.method(#createEvent, [], {
                  #title: title,
                  #description: description,
                  #category: category,
                  #location: location,
                  #locationName: locationName,
                  #startTime: startTime,
                  #neededParticipants: neededParticipants,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.EventModel>);

  @override
  _i4.Future<void> updateEvent(
    String? eventId,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateEvent, [eventId, updates]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancelEvent(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelEvent, [eventId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteEvent(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteEvent, [eventId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addParticipant(String? eventId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#addParticipant, [eventId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> archiveExpiredEvents() =>
      (super.noSuchMethod(
            Invocation.method(#archiveExpiredEvents, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
