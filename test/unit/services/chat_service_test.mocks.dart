// Mocks generated by Mockito 5.4.6 from annotations
// in vibe_app/test/unit/services/chat_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:vibe_app/features/chat/models/message_model.dart' as _i4;
import 'package:vibe_app/features/chat/services/chat_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ChatService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatService extends _i1.Mock implements _i2.ChatService {
  MockChatService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.MessageModel>> getEventMessages(
    String? eventId, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getEventMessages, [eventId], {#limit: limit}),
            returnValue: _i3.Stream<List<_i4.MessageModel>>.empty(),
          )
          as _i3.Stream<List<_i4.MessageModel>>);

  @override
  _i3.Future<void> sendMessage({
    required String? eventId,
    required String? text,
    String? replyToMessageId,
    String? replyToText,
    String? replyToSenderName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [], {
              #eventId: eventId,
              #text: text,
              #replyToMessageId: replyToMessageId,
              #replyToText: replyToText,
              #replyToSenderName: replyToSenderName,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> sendSystemMessage(String? eventId, String? text) =>
      (super.noSuchMethod(
            Invocation.method(#sendSystemMessage, [eventId, text]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.MessageModel>> loadOlderMessages({
    required String? eventId,
    required DateTime? before,
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadOlderMessages, [], {
              #eventId: eventId,
              #before: before,
              #limit: limit,
            }),
            returnValue: _i3.Future<List<_i4.MessageModel>>.value(
              <_i4.MessageModel>[],
            ),
          )
          as _i3.Future<List<_i4.MessageModel>>);

  @override
  _i3.Future<void> markMessagesRead(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#markMessagesRead, [eventId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> leaveChat(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#leaveChat, [eventId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
