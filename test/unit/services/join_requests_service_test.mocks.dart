// Mocks generated by Mockito 5.4.6 from annotations
// in vibe_app/test/unit/services/join_requests_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:vibe_app/features/events/models/join_request_model.dart' as _i2;
import 'package:vibe_app/features/events/services/join_requests_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeJoinRequestModel_0 extends _i1.SmartFake
    implements _i2.JoinRequestModel {
  _FakeJoinRequestModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [JoinRequestsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJoinRequestsService extends _i1.Mock
    implements _i3.JoinRequestsService {
  MockJoinRequestsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i2.JoinRequestModel>> getIncomingRequests() =>
      (super.noSuchMethod(
            Invocation.method(#getIncomingRequests, []),
            returnValue: _i4.Stream<List<_i2.JoinRequestModel>>.empty(),
          )
          as _i4.Stream<List<_i2.JoinRequestModel>>);

  @override
  _i4.Stream<List<_i2.JoinRequestModel>> getMyRequests() =>
      (super.noSuchMethod(
            Invocation.method(#getMyRequests, []),
            returnValue: _i4.Stream<List<_i2.JoinRequestModel>>.empty(),
          )
          as _i4.Stream<List<_i2.JoinRequestModel>>);

  @override
  _i4.Stream<List<_i2.JoinRequestModel>> getEventRequests(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#getEventRequests, [eventId]),
            returnValue: _i4.Stream<List<_i2.JoinRequestModel>>.empty(),
          )
          as _i4.Stream<List<_i2.JoinRequestModel>>);

  @override
  _i4.Future<_i2.JoinRequestModel> sendJoinRequest(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#sendJoinRequest, [eventId]),
            returnValue: _i4.Future<_i2.JoinRequestModel>.value(
              _FakeJoinRequestModel_0(
                this,
                Invocation.method(#sendJoinRequest, [eventId]),
              ),
            ),
          )
          as _i4.Future<_i2.JoinRequestModel>);

  @override
  _i4.Future<void> approveRequest(String? requestId) =>
      (super.noSuchMethod(
            Invocation.method(#approveRequest, [requestId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> declineRequest(String? requestId) =>
      (super.noSuchMethod(
            Invocation.method(#declineRequest, [requestId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> autoDeclinePendingRequests(String? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#autoDeclinePendingRequests, [eventId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
